services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
    volumes:
      - ./pgdb-data:/var/lib/postgresql/data
    networks:
      tripeasy_net:
        ipv4_address: 172.18.0.11
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DB_USER} -d ${POSTGRES_DB_NAME}"]
      interval: 10s
      retries: 3
    restart: unless-stopped

  api:
    build:
      context: .
    container_name: node_api_app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - .:/usr/backend       # üî• Á∂ÅÂà∞ /usr/src/backend
    command: sh -c "npm install --include=dev && npm run dev"
    environment:
      - NODE_ENV=development
      - PORT=${PORT}
      - POSTGRES_DB_HOST=${POSTGRES_DB_HOST}
      - POSTGRES_DB_PORT=${POSTGRES_DB_PORT}
      - POSTGRES_DB_USER=${POSTGRES_DB_USER}
      - POSTGRES_DB_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
    networks:
      tripeasy_net:
        ipv4_address: 172.18.0.30
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  tripeasy_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1
